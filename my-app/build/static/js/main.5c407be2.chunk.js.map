{"version":3,"sources":["Drugs.js","App.js","serviceWorker.js","index.js"],"names":["requestToken","login","password","a","axios","post","response","Drugs","React","useState","setLogin","setPassword","undefined","token","sendInfo","console","log","data","className","to","for","value","onChange","e","target","required","onClick","Home","src","width","alt","wifth","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6UAMeA,E,gFAAf,WAA4BC,EAAOC,GAAnC,eAAAC,EAAA,sEACyBC,IAAMC,KAC3B,8BACA,CAAE,MAASJ,EACT,SAAYC,IAJlB,cACQI,EADR,yBAOSA,GAPT,4C,sBAwCeC,MA9Bf,WAAkB,IAAD,EACWC,IAAMC,SAAS,IAD1B,mBACRR,EADQ,KACDS,EADC,OAEiBF,IAAMC,SAAS,IAFhC,mBAERP,EAFQ,KAEES,EAFF,OAGWH,IAAMC,cAASG,GAH1B,mBAGRC,EAHQ,KAKTC,GALS,KAKD,uCAAG,4BAAAX,EAAA,6DACfY,QAAQC,IAAIf,EAAOC,GACbe,EAAOjB,EAAaC,EAAOC,GAFlB,kBAGRe,GAHQ,2CAAH,sDAMd,OACE,yBAAKC,UAAU,YACb,kBAAC,IAAD,CAAMC,GAAG,KACP,4BAAQD,UAAW,cAAnB,SAEF,8BACE,2BAAOE,IAAI,SAASF,UAAU,QAA9B,SACA,2BAAOG,MAAOpB,EAAOqB,SAAU,SAAAC,GAAC,OAAIb,EAASa,EAAEC,OAAOH,QAAQI,UAAQ,KAExE,8BACE,2BAAOL,IAAI,SAASF,UAAU,QAA9B,YACA,2BAAOG,MAAOnB,EAAUoB,SAAU,SAAAC,GAAC,OAAIZ,EAAYY,EAAEC,OAAOH,QAAQI,UAAQ,KAE9E,4BAAQP,UAAY,cAAcQ,QAASZ,GAA3C,WACA,8BAAiB,KAAVD,EAAe,wCAAsB,iC,MCxBlD,SAASc,IACP,OACE,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKU,IAAI,eAAeC,MAAO,OAAOC,IAAK,YAC3C,mCACA,mCACA,kBAAC,IAAD,CAAMX,GAAG,UACT,4BAAQD,UAAU,UAClB,uBAAGA,UAAU,iBAAb,gBAMF,0BAAMA,UAAU,YACd,yBAAKU,IAAI,eAAeG,MAAO,QAAQb,UAAU,WAAWY,IAAI,SAChE,6DAQOE,MApCf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAW5B,OCCpB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.5c407be2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport App from './App';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\n\nasync function requestToken(login, password) {\n  const response = await axios.post(\n    'http://localhost:3000/login',\n    { \"login\": login, \n      \"paswword\": password,\n    },\n  )\n  return response\n}\n\nfunction Drugs() {\n  const [login, setLogin] = React.useState(\"\")\n  const [password, setPassword] = React.useState(\"\")\n  const [token, setToken] = React.useState(undefined)\n\n  const sendInfo = async function () {\n    console.log(login, password);\n    const data = requestToken(login, password);\n    return data;\n  }\n\n  return (\n    <div className=\"Register\">\n      <Link to=\"/\">\n        <button className= \"ButtonMenu\">Menu</button>\n      </Link>\n      <form>\n        <label for=\"choose\" className=\"text\">Login</label>\n        <input value={login} onChange={e => setLogin(e.target.value)} required></input>\n      </form>\n      <form>\n        <label for=\"choose\" className=\"text\">password</label>\n        <input value={password} onChange={e => setPassword(e.target.value)} required></input>\n      </form>\n      <button className = \"ButtonEnter\" onClick={sendInfo}>Envoyer</button>\n      <text>{token === \"\" ? <text>Error </text> : <div></div>}</text>\n    </div>\n  );\n}\n\nexport default Drugs;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Drugs from './Drugs';\nimport './page-header.css';\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/login\" component={Drugs} />\n      </Router>\n    </div>\n  )\n}\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"/docteur.png\" width= '50px' alt= \"docteur\"/>\n        <h2>oui</h2>\n        <h3>oui</h3>\n        <Link to=\"/login\">\n        <button className=\"Button\">\n        <p className=\"Button_police\">\n          connexion\n        </p>\n        </button>\n        </Link>\n      </header>\n      <body className=\"App-body\">\n        <img src=\"/pillule.png\" wifth= '400px' className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Dr Useful Guaranted Security\n        </p>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}